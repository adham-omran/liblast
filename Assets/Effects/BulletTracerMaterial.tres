[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeFresnel" id=1]
default_input_values = [ 2, true, 3, 3.0 ]

[sub_resource type="VisualShaderNodeColorConstant" id=2]
output_port_for_preview = 0
constant = Color( 1, 0.937255, 0.215686, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 2.0

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
render_mode specular_disabled, unshaded;




void vertex() {
// Output:0

}

void fragment() {
// Color:3
	vec3 n_out3p0 = vec3(1.000000, 0.937255, 0.215686);
	float n_out3p1 = 1.000000;

// Scalar:5
	float n_out5p0 = 2.000000;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * vec3(n_out5p0);

// Fresnel:2
	bool n_in2p2 = true;
	float n_in2p3 = 3.00000;
	float n_out2p0 = n_in2p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3));

// Output:0
	ALBEDO = n_out4p0;
	ALPHA = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -509, -65.75 )
modes/specular = 4
flags/unshaded = true
nodes/fragment/0/position = Vector2( 760, 120 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -380, 80 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -120, 260 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 280, 60 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 200, 380 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 0, 0, 5, 0, 4, 1, 2, 0, 0, 1 )

[resource]
shader = SubResource( 5 )
